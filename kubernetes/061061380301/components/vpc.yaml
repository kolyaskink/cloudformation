AWSTemplateFormatVersion: '2010-09-09'

Description: >
    This template deploys a VPC, with a pair of public and private subnets spread
    across two Availabilty Zones. It deploys an Internet Gateway, with a default
    route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ),
    and default routes for them in the private subnets. It deploys a single BastionHost
    in an AutoScalingGroup so it is not depending on a single AZ


Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.192.0.0/16

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.192.10.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.192.11.0/24

    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.192.20.0/24

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        Default: 10.192.21.0/24

    BastionHostInstanceType:
        Description: Bastion Host EC2 instance type
        Type: String
        Default: t2.micro

    KeyName:
        Description: SSH Key to grant access to
        Type: String

    SshFrom:
        Description: IP address to grant access to
        Type: String
        Default: 0.0.0.0/0

    EnvironmentType:
        Description: determines the type of the environment and thus whether it can be
            shutdown without serious consequences
        Type: String
        Default: 'development'
        AllowedValues:
        - 'development'
        - 'test'
        - 'preproduction'
        - 'production'

#    PeerVPC:
#        Type: String
#        Description: Peer VPC
#
#    PeerVPCCIDR:
#        Description: Please enter the IP range (CIDR notation) for PEER VPC
#        Type: String
#        Default: 10.0.0.0/16

Mappings:
    # Only mappings to 64 bits AMIs
    AWSRegionToEC2AMI:
        us-east-1:
            AMI: ami-b73b63a0
        us-west-1:
            AMI: ami-23e8a343
        us-west-2:
            AMI: ami-5ec1673e
        eu-west-1:
            AMI: ami-9398d3e0
        eu-central-1:
            AMI: ami-f9619996
        eu-west-2:
            AMI: ami-d6cbc1b2

Resources:

    InstanceProfile:
        Type: 'AWS::IAM::InstanceProfile'
        Properties:
          Path: '/'
          Roles:
          - !Ref IAMRole

    IAMRole:
        Type: 'AWS::IAM::Role'
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Service:
                - 'ec2.amazonaws.com'
              Action:
              - 'sts:AssumeRole'
          Path: '/'
          Policies:
          - PolicyName: 'ec2'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - 'ec2:AssociateAddress'
                Resource:
                - '*'
          - PolicyName: logs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 'logs:DescribeLogStreams'
                Resource:
                - 'arn:aws:logs:*:*:*'

    EIP:
        Type: 'AWS::EC2::EIP'
        Properties:
            Domain: vpc

    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

#    PeeringRoute:
#        Type: AWS::EC2::Route
#        Properties:
#            RouteTableId: !Ref PublicRouteTable
#            DestinationCidrBlock: !Ref PeerVPCCIDR
#            VpcPeeringConnectionId: !Ref VPCPeeringConnection

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    RDSSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupDescription: "Subnet group for RDS instance consisting of 2 private subnets"
            SubnetIds:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
            Tags:
            -
                Key: Name
                Value: !Sub ${EnvironmentName} Private DB Subnet Group

    RDSReadReplicaSubnetGroup:
        Type: AWS::RDS::DBSubnetGroup
        Properties:
            DBSubnetGroupDescription: "Subnet group for RDS instance consisting of 2 public subnets"
            SubnetIds:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
            Tags:
            -
                Key: Name
                Value: !Sub ${EnvironmentName} Public DB Subnet Group


    BastionSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Enable access to the Bastion host
            VpcId: !Ref VPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: !Ref SshFrom

    BastionLaunchConfiguration:
        Type: 'AWS::AutoScaling::LaunchConfiguration'
        Metadata:
            'AWS::CloudFormation::Init':
                configSets:
                    default:
                        - ssh-access
                ssh-access:
                  services:
                    sysvinit:
                      sshd:
                        enabled: true
                        ensureRunning: true
        Properties:
              AssociatePublicIpAddress: true
              EbsOptimized: false
              IamInstanceProfile: !Ref InstanceProfile
              ImageId: !FindInMap [AWSRegionToEC2AMI, !Ref 'AWS::Region', AMI]
              InstanceType: !Ref BastionHostInstanceType
              SecurityGroups:
              - !Ref BastionSecurityGroup
              KeyName: !Ref KeyName
              UserData:
                'Fn::Base64': !Sub |
                  #!/bin/bash -x
                  INSTANCEID=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)
                  aws --region ${AWS::Region} ec2 associate-address --instance-id $INSTANCEID --allocation-id ${EIP.AllocationId} && /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource BastionLaunchConfiguration --region ${AWS::Region}
                  /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionAutoScalingGroup --region ${AWS::Region}

    BastionAutoScalingGroup:
        Type: 'AWS::AutoScaling::AutoScalingGroup'
        Properties:
          DesiredCapacity: 1
          LaunchConfigurationName: !Ref BastionLaunchConfiguration
          MaxSize: 1
          MinSize: 1
          VPCZoneIdentifier:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        CreationPolicy:
          ResourceSignal:
            Count: 1
            Timeout: PT10M
        UpdatePolicy:
          AutoScalingRollingUpdate:
            PauseTime: PT10M
            WaitOnResourceSignals: true

Outputs:

    VPC:
        Description: A reference to the created VPC
        Value: !Ref VPC

    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

    PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]

    PublicSubnet1:
        Description: A reference to the public subnet in the 1st Availability Zone
        Value: !Ref PublicSubnet1

    PublicSubnet2:
        Description: A reference to the public subnet in the 2nd Availability Zone
        Value: !Ref PublicSubnet2

    PrivateSubnet1:
        Description: A reference to the private subnet in the 1st Availability Zone
        Value: !Ref PrivateSubnet1

    PrivateSubnet2:
        Description: A reference to the private subnet in the 2nd Availability Zone
        Value: !Ref PrivateSubnet2

    RDSSubnetGroup:
        Description: A reference to DB subnet group
        Value: !Ref RDSSubnetGroup

    RDSReadReplicaSubnetGroup:
        Description: A reference to DB subnet group
        Value: !Ref RDSReadReplicaSubnetGroup
        
    Bastion:
        Description: IP of Bastion Host
        Value: !Ref EIP

    BastionSecurityGroup:
        Description: A reference to the Security Group where the Bastion Hosts are in
        Value: !Ref BastionSecurityGroup

    PublicRouteTable:
        Description: The route table that should be applied to the subnets where the kubernetes instances are created
        Value: !Ref PublicRouteTable
