AWSTemplateFormatVersion: '2010-09-09'

Description: >

    Deploys a VPC with 2 public and 2 private subnets, Internet Gateway, NAT Gateway GS and Bastion Host.
    
Mappings:
    AWSRegionToEC2AMI:
        us-west-2:
            AMI: ami-bd7beddd
        eu-west-2:
            AMI: ami-f1949e95

Resources:

    # VPC and Subnets 
    VPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Sub vpc-${EnvironmentName}

    PublicSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

    PublicSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

    PrivateSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

    PrivateSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

    # Inetrnet GW and etc
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Public Routes

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2

    # Ipsec
    LuxVPNGW:    
        Type: "AWS::EC2::VPNGateway"
        Properties: 
          Type: ipsec.1
          Tags:
              - Key: Name
                Value: LuxVPNGW            
              - Key: Env
                Value: !Ref EnvironmentName
              - Key: Destination
                Value: Lux

    LuxVPNCG:    
        Type: "AWS::EC2::CustomerGateway"
        Properties:
          BgpAsn: !Ref VpnAsLux
          IpAddress: !Ref VpnIpLux
          Type: ipsec.1
          Tags: 
              - Key: Name
                Value: LuxVPNCG   
              - Key: Env
                Value: !Ref EnvironmentName
              - Key: Destination
                Value: Lux

    LuxVPN:
        Type: "AWS::EC2::VPNConnection"
        Properties: 
          Type: ipsec.1
          CustomerGatewayId: !Ref LuxVPNCG
          StaticRoutesOnly: false
          VpnGatewayId: !Ref LuxVPNGW
          Tags:
              - Key: Name
                Value: LuxVPN   
              - Key: Env
                Value: !Ref EnvironmentName
              - Key: Destination
                Value: Lux              
 
    LuxVPNAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties: 
          VpcId: !Ref VPC
          VpnGatewayId: !Ref LuxVPNGW      

    LuxVPNRoutePropagation:
        Type: "AWS::EC2::VPNGatewayRoutePropagation"
        DependsOn: LuxVPNGW
        Properties: 
          RouteTableIds:
            - !Ref PublicRouteTable
            - !Ref PrivateRouteTable1 
            - !Ref PrivateRouteTable2
          VpnGatewayId: !Ref LuxVPNGW        


    # NAT GW and etc
    EIP:
        Type: 'AWS::EC2::EIP'
        Properties:
            Domain: vpc   

    NatGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway1:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway1EIP.AllocationId
            SubnetId: !Ref PublicSubnet1

    NatGateway2:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGateway2EIP.AllocationId
            SubnetId: !Ref PublicSubnet2

    PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

    PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub ${EnvironmentName} Private Routes (AZ2)

    DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway1

    DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway2

    PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref PrivateSubnet1

    PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref PrivateSubnet2

    #Bastion host
    BastionSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Enable access to the Bastion host
            VpcId: !Ref VPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: !Ref SshFrom1
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: !Ref SshFrom2
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: !Ref SshFrom3
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: !Ref SshFrom4
            Tags:
                - Key: Name
                  Value: bastion

    BastionLaunchConfiguration:
        Type: 'AWS::AutoScaling::LaunchConfiguration'
        Metadata:
            'AWS::CloudFormation::Init':
                configSets:
                    default:
                        - ssh-access
                ssh-access:
                  services:
                    sysvinit:
                      sshd:
                        enabled: true
                        ensureRunning: true
        Properties:
              AssociatePublicIpAddress: true
              EbsOptimized: false
              IamInstanceProfile: !Ref BastionInstanceProfile
              ImageId: !FindInMap [AWSRegionToEC2AMI, !Ref 'AWS::Region', AMI]
              InstanceType: !Ref BastionHostInstanceType
              SecurityGroups:
              - !Ref BastionSecurityGroup
              KeyName: !Ref KeyName
              UserData:
                'Fn::Base64': !Sub |
                  #!/bin/bash -x
                  INSTANCEID=$(curl -s -m 60 http://169.254.169.254/latest/meta-data/instance-id)
                  aws --region ${AWS::Region} ec2 associate-address --instance-id $INSTANCEID --allocation-id ${EIP.AllocationId} && /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource BastionLaunchConfiguration --region ${AWS::Region}
                  /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BastionAutoScalingGroup --region ${AWS::Region}

    BastionAutoScalingGroup:
        Type: 'AWS::AutoScaling::AutoScalingGroup'
        Properties:
          DesiredCapacity: 1
          LaunchConfigurationName: !Ref BastionLaunchConfiguration
          MaxSize: 1
          MinSize: 1
          VPCZoneIdentifier:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        CreationPolicy:
          ResourceSignal:
            Count: 1
            Timeout: PT10M
        UpdatePolicy:
          AutoScalingRollingUpdate:
            PauseTime: PT10M
            WaitOnResourceSignals: true

    BastionInstanceProfile:
        Type: 'AWS::IAM::InstanceProfile'
        Properties:
          Path: '/'
          Roles:
          - !Ref BastionIAMRole

    BastionIAMRole:
        Type: 'AWS::IAM::Role'
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Service:
                - 'ec2.amazonaws.com'
              Action:
              - 'sts:AssumeRole'
          Path: '/'
          Policies:
          - PolicyName: 'ec2'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - 'ec2:AssociateAddress'
                - 'ec2:DescribeTags'
                Resource:
                - '*'
          - PolicyName: logs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 'logs:DescribeLogStreams'
                Resource:
                - 'arn:aws:logs:*:*:*'

    #Peering
    # GH-MISC
    PeerPublicRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: !Ref PeerVpcCIDRGhMisc
            VpcPeeringConnectionId: !Ref VPCPeeringConnectionGhMisc

    PeerPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: !Ref PeerVpcCIDRGhMisc
            VpcPeeringConnectionId: !Ref VPCPeeringConnectionGhMisc

    PeerPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: !Ref PeerVpcCIDRGhMisc
            VpcPeeringConnectionId: !Ref VPCPeeringConnectionGhMisc

    # Games
    PeerPublicRouteGames:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: !Ref PeerVpcCIDRGames
            VpcPeeringConnectionId: !Ref VPCPeeringConnectionGames

    PeerPrivateRoute1Games:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: !Ref PeerVpcCIDRGames
            VpcPeeringConnectionId: !Ref VPCPeeringConnectionGames

    PeerPrivateRoute2Games:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: !Ref PeerVpcCIDRGames
            VpcPeeringConnectionId: !Ref VPCPeeringConnectionGames
    #Chef
    ChefEC2Instance: 
        Type: "AWS::EC2::Instance"
        Properties: 
            ImageId: !FindInMap [AWSRegionToEC2AMI, !Ref 'AWS::Region', AMI]
            KeyName: !Ref KeyName
            IamInstanceProfile: !Ref ChefInstanceProfile
            InstanceType: !Ref ChefHostInstanceType
            SecurityGroupIds: [!Ref ChefEC2SecurityGroup]
            SubnetId: !Ref PrivateSubnet1 
            Tags:
              - Key: Name
                Value: InfraChef

    ChefInstanceProfile:
        Type: 'AWS::IAM::InstanceProfile'
        Properties:
          Path: '/'
          Roles:
          - !Ref ChefIAMRole

    ChefEC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Enable access to the Chef EC2
            VpcId: !Ref VPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                SourceSecurityGroupId: !Ref BastionSecurityGroup
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 10.50.0.0/16
              - IpProtocol: tcp
                FromPort: 443
                ToPort: 443
                CidrIp: 10.50.0.0/16
            Tags:
                - Key: Name
                  Value: infra-chef-ec2

    ChefIAMRole:
        Type: 'AWS::IAM::Role'
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Service:
                - 'ec2.amazonaws.com'
              Action:
              - 'sts:AssumeRole'
          Path: '/'
          Policies:
          - PolicyName: 'ec2'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - 'ec2:AssociateAddress'
                Resource:
                - '*'
          - PolicyName: logs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - 'logs:CreateLogGroup'
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
                - 'logs:DescribeLogStreams'
                Resource:
                - 'arn:aws:logs:*:*:*'


Parameters:


    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
        Default: dev

    VpcCIDR:
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.51.0.0/24

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.51.0.0/26

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.51.0.64/26

    PrivateSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
        Type: String
        Default: 10.51.0.128/26

    PrivateSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
        Type: String
        Default: 10.51.0.192/26

    SshFrom1:
        Description: IP address to grant access to
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
        Default: 212.67.170.162/32

    SshFrom2:
        Description: IP address to grant access to
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
        Default: 127.0.0.1/32

    SshFrom3:
        Description: IP address to grant access to
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
        Default: 127.0.0.2/32

    SshFrom4:
        Description: IP address to grant access to
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
        Default: 127.0.0.3/32

    KeyName:
        ConstraintDescription: must be the name of an existing EC2 KeyPair.
        Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
        MinLength: '1'
        Type: AWS::EC2::KeyPair::KeyName

    BastionHostInstanceType:
        Type: String
        Default: t2.micro
        AllowedValues:
            - t2.micro
            - t2.small
            - m1.small
        Description: Enter t2.micro, t2.small, or m1.small. Default is t2.micro.

    PeerVpcCIDRGhMisc:
        Description: Please enter the IP range (CIDR notation) for peering VPC
        Type: String
        Default: 10.51.0.0/24

    VPCPeeringConnectionGhMisc:
        Description: Please enter the ID of the peering VPC
        Type: String
        Default: none

    PeerVpcCIDRGames:
        Description: Please enter the IP range (CIDR notation) for peering VPC
        Type: String
        Default: 10.51.3.0/24

    VPCPeeringConnectionGames:
        Description: Please enter the ID of the peering VPC
        Type: String
        Default: none

    ChefHostInstanceType:
        Type: String
        Default: t2.small
        AllowedValues:
            - t2.small
            - t2.medium 
            - m4.large
        Description: Enter t2.small, t2.medium or m4.large. Default is t2.small. 

    VpnAsLux:
        Description: IpSec As for Lux
        Type: String
        Default: none

    VpnIpLux:
        Description: IP address of Lux IpSec endpoint
        Type: String
        Default: none


Outputs:

    VpcId:
        Description: The ID for the created VPC
        Value: !Ref VPC
    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    PublicSubnet1Id: 
        Description: The ID for 1 public subnet
        Value: !Ref PublicSubnet1
    PublicSubnet2Id: 
        Description: The ID for 2 public subnet
        Value: !Ref PublicSubnet2
    PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    PrivateSubnet1Id: 
        Description: The ID for 1 private subnet
        Value: !Ref PrivateSubnet1
    PrivateSubnet2Id: 
        Description: The ID for 2 private subnet
        Value: !Ref PrivateSubnet2
    PublicRouteTable:
        Description: The route table for public subnets
        Value: !Ref PublicRouteTable
    PrivateRouteTable1:
        Description: The route table for private subnet in AZ1
        Value: !Ref PrivateRouteTable1
    PrivateRouteTable2:
        Description: The route table for private subnet in AZ2
        Value: !Ref PrivateRouteTable2
    BastionIp:
        Description: IP of Bastion Host
        Value: !Ref EIP
    BastionSecurityGroup:
        Description: A reference to the Security Group where the Bastion Hosts are in
        Value: !Ref BastionSecurityGroup



