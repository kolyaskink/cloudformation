AWSTemplateFormatVersion: '2010-09-09'

Description: >

    This template deploys Jenkins node with a LB, SG 

Mappings:

    AWSRegionToEC2AMI:
        us-west-2:
            AMI: ami-f173cc91
        eu-west-2:
            AMI: ami-f1949e95

Resources:
      
      LBSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Enable access to the Jenkins LB
            VpcId: !Ref VpcId
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 443
                ToPort: 443
                CidrIp: !Ref HttpsFrom1
              - IpProtocol: tcp
                FromPort: 443
                ToPort: 443
                CidrIp: !Ref HttpsFrom2
              - IpProtocol: tcp
                FromPort: 443
                ToPort: 443
                CidrIp: !Ref HttpsFrom3
              - IpProtocol: tcp
                FromPort: 443
                ToPort: 443
                CidrIp: !Ref HttpsFrom4
            Tags:
                - Key: Name
                  Value: infra-jenkins-lb

      EC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: Enable access to the Jenkins EC2
            VpcId: !Ref VpcId
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                SourceSecurityGroupId: !Ref LBSecurityGroup
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: !Ref VpcCIDR
            Tags:
                - Key: Name
                  Value: infra-jenkins-ec2

      JenkinsEC2Instance: 
            Type: "AWS::EC2::Instance"
            Properties: 
              ImageId: !FindInMap [AWSRegionToEC2AMI, !Ref 'AWS::Region', AMI]
              KeyName: !Ref KeyName
              IamInstanceProfile: !Ref InstanceProfile
              InstanceType: !Ref JenkinsHostInstanceType
              SecurityGroupIds: [!Ref EC2SecurityGroup]
              SubnetId: !Ref PublicSubnet1Id
              Tags:
                - Key: Name
                  Value: InfraJenkins

      JenkinsLoadBalanser:
        Type: "AWS::ElasticLoadBalancing::LoadBalancer"
        Properties:
            Instances: [!Ref JenkinsEC2Instance]
            LoadBalancerName: lb-Infra-Jenkins
            Listeners:
                  - LoadBalancerPort: 443
                    InstancePort: !Ref ApachePort
                    Protocol: HTTPS
                    SSLCertificateId: !Ref GhSslCert
            HealthCheck:
                  Target: HTTP:80/static/19c0b418/images/headshot.png
                  HealthyThreshold: '3'
                  UnhealthyThreshold: '5'
                  Interval: '30'
                  Timeout: '5'
            Scheme: internet-facing
            SecurityGroups: [!Ref LBSecurityGroup]
            Subnets: [!Ref PublicSubnet1Id]

      InstanceProfile:
        Type: 'AWS::IAM::InstanceProfile'
        Properties:
          Path: '/'
          Roles:
          - !Ref IAMRole

      IAMRole:
        Type: 'AWS::IAM::Role'
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Service:
                - 'ec2.amazonaws.com'
              Action:
              - 'sts:AssumeRole'
          Path: '/'
          Policies:
          - PolicyName: 'ec2'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - 'ec2:*'
                Resource:
                - '*'

          - PolicyName: 'logs'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - 'logs:*'
                Resource:
                - 'arn:aws:logs:*:*:*'

          - PolicyName: 'cloudformationall'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Effect: Allow
                Action:
                - 'cloudformation:*'
                Resource:
                - '*'




Parameters:

      VpcId:
        Description: Please enter the ID of created VPC
        Type: String
        Default: vpc-ef223f8b

      VpcCIDR:
        Description: Please enter the ID of created VPC
        Type: String
        Default: 10.50.2.0/24

      PublicSubnet1Id:
        Description: Please enter the ID for 1 public subnet
        Type: String
        Default: subnet-5f7c793b

      PublicSubnet2Id:
        Description: Please enter the ID for 2 public subnet
        Type: String
        Default: subnet-7d69350b

      HttpsFrom1:
        Description: IP address to grant access to
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
        Default: 212.67.170.162/32

      HttpsFrom2:
        Description: IP address to grant access to
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
        Default: 127.0.0.1/32

      HttpsFrom3:
        Description: IP address to grant access to
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
        Default: 127.0.0.2/32

      HttpsFrom4:
        Description: IP address to grant access to
        Type: String
        MinLength: 9
        MaxLength: 18
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
        Default: 127.0.0.3/32

      KeyName:
        ConstraintDescription: must be the name of an existing EC2 KeyPair.
        Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
        MinLength: '1'
        Type: AWS::EC2::KeyPair::KeyName

      ApachePort:
        Description: Apache port in front of Jenkins's app
        Type: String
        MinLength: 2
        MaxLength: 5
        Default: 80

      GhSslCert:
        Description: arn of SSL cert
        Type: String
        Default: arn:aws:acm:us-west-2:777556643132:certificate/896e5609-1aac-446c-b17e-608bce984e22
      
      JenkinsHostInstanceType:
        Type: String
        Default: t2.small
        AllowedValues:
            - t2.small
            - t2.medium 
            - m4.large
        Description: Enter t2.small, t2.medium or m4.large. Default is t2.small.

Outputs:

      LBSecurityGroup:
        Description: LB Security Group where Jenkins is
        Value: !Ref LBSecurityGroup

      EC2SecurityGroup:
        Description: EC2 Security Group where Jenkins is
        Value: !Ref EC2SecurityGroup

      JenkinsEC2InstanceId:
        Description: EC2 instance ID
        Value: !Ref JenkinsEC2Instance

      JenkinsLoadBalanserId:
        Description: Jenkins LB ID
        Value: !Ref JenkinsLoadBalanser

      JenkinsLoadBalanserDnsName:
        Description: Hostname for LB. Create CNAME record something.gamehouse.com pinyed to it
        Value: !GetAtt JenkinsLoadBalanser.DNSName

      JenkinsInstanceProfile:
        Description: Jenkins instance profile ARN
        Value: !GetAtt InstanceProfile.Arn

                
              




